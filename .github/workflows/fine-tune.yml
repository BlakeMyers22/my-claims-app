name: Fine-Tune GPT Model

on:
  workflow_dispatch: {} # allow manual run
  schedule:
    - cron: '35 1 * * *' # run daily at 01:35 UTC

jobs:
  fine-tune-job:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # or 18

      - name: Install deps
        run: npm install

      - name: Fine-tune
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          node <<EOF
          const fs = require('fs');
          const axios = require('axios');
          const { createClient } = require('@supabase/supabase-js');
          const { Configuration, OpenAIApi } = require('openai');

          (async function(){
            try {
              // Connect Supabase
              const supabaseUrl = process.env.SUPABASE_URL;
              const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
              const supabase = createClient(supabaseUrl, supabaseKey);

              // Get feedback rating >= 6
              const { data: rows, error } = await supabase
                .from('feedback')
                .select('*')
                .gte('rating', 6);

              if (error) {
                console.error('Supabase query error:', error);
                process.exit(1);
              }
              if (!rows || rows.length === 0) {
                console.log('No high-rated feedback found. Exiting.');
                process.exit(0);
              }

              console.log('Found', rows.length, 'high-rated feedback entries.');

              // Build JSONL lines
              const lines = rows.map((row) => {
                const prompt = \`Section: \${row.section_id}\nUser Feedback: \${row.feedback}\n\nGenerate final text:\n\`;
                const completion = row.generated_text.trim() + " END";
                return JSON.stringify({ prompt, completion });
              });

              fs.writeFileSync('training-data.jsonl', lines.join('\n') + '\n');

              // init OpenAI
              const config = new Configuration({
                apiKey: process.env.OPENAI_API_KEY
              });
              const openai = new OpenAIApi(config);

              // Upload file
              console.log('Uploading training-data.jsonl...');
              const fileResp = await openai.createFile(
                fs.createReadStream('training-data.jsonl'),
                "fine-tune"
              );
              const fileId = fileResp.data.id;
              console.log('File uploaded, ID =', fileId);

              // Start fine-tune
              console.log('Starting fine-tune on gpt-3.5-turbo...');
              const ftResp = await openai.createFineTune({
                training_file: fileId,
                model: "gpt-3.5-turbo"
              });
              const jobId = ftResp.data.id;
              let status = ftResp.data.status;
              console.log('Job started, ID:', jobId, 'status:', status);

              // Poll
              while (status !== 'succeeded' && status !== 'failed') {
                console.log('Current status:', status, '... wait 30s');
                await new Promise(res => setTimeout(res, 30000));
                const check = await openai.retrieveFineTune(jobId);
                status = check.data.status;
              }

              if (status === 'failed') {
                console.error('Fine-tune job failed!');
                process.exit(1);
              }

              const finalJob = await openai.retrieveFineTune(jobId);
              const newModel = finalJob.data.fine_tuned_model;
              console.log('Fine-tune succeeded. New model =', newModel);

              // Update Netlify env
              const netlifyToken = process.env.NETLIFY_AUTH_TOKEN;
              const siteId = process.env.NETLIFY_SITE_ID;
              if (!netlifyToken || !siteId) {
                console.warn('Missing NETLIFY_AUTH_TOKEN or NETLIFY_SITE_ID. Manually set FINE_TUNED_MODEL_NAME to:', newModel);
                process.exit(0);
              }

              // Fetch existing env
              const envResp = await axios.get(\`https://api.netlify.com/api/v1/sites/\${siteId}/env\`, {
                headers: { Authorization: \`Bearer \${netlifyToken}\` }
              });
              const envVars = envResp.data || [];
              const found = envVars.find(v => v.key === 'FINE_TUNED_MODEL_NAME');

              if (!found) {
                console.log('Creating new env var FINE_TUNED_MODEL_NAME...');
                await axios.post(\`https://api.netlify.com/api/v1/sites/\${siteId}/env\`, {
                  key: 'FINE_TUNED_MODEL_NAME',
                  values: { production: newModel }
                },{
                  headers: { Authorization: \`Bearer \${netlifyToken}\` }
                });
              } else {
                console.log('Updating existing env var FINE_TUNED_MODEL_NAME...');
                await axios.patch(\`https://api.netlify.com/api/v1/sites/\${siteId}/env/\${found.id}\`, {
                  values: { production: newModel }
                }, {
                  headers: { Authorization: \`Bearer \${netlifyToken}\` }
                });
              }

              // Trigger redeploy
              console.log('Triggering Netlify redeploy...');
              await axios.post(\`https://api.netlify.com/api/v1/sites/\${siteId}/builds\`, {}, {
                headers: { Authorization: \`Bearer \${netlifyToken}\` }
              });
              console.log('Redeploy triggered. Done!');
              process.exit(0);
            } catch(err) {
              console.error('Fine-tune script error:', err);
              process.exit(1);
            }
          })();
          EOF
